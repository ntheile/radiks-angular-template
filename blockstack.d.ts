/** Declaration file generated by dts-gen */

export class AppConfig {
    constructor(...args: any[]);

    manifestURI(...args: any[]): void;

    redirectURI(...args: any[]): void;

}

export class BlockstackWallet {
    constructor(...args: any[]);

    getBitcoinAddress(...args: any[]): void;

    getBitcoinNode(...args: any[]): void;

    getBitcoinPrivateKey(...args: any[]): void;

    getBitcoinPrivateKeychain(...args: any[]): void;

    getBitcoinPublicKeychain(...args: any[]): void;

    getIdentityAddressNode(...args: any[]): void;

    getIdentityKeyPair(...args: any[]): void;

    getIdentityPrivateKeychain(...args: any[]): void;

    getIdentityPublicKeychain(...args: any[]): void;

    getIdentitySalt(...args: any[]): void;

    toBase58(...args: any[]): void;

    static encryptMnemonic(...args: any[]): void;

    static fromBase58(...args: any[]): void;

    static fromEncryptedMnemonic(...args: any[]): void;

    static fromSeedBuffer(...args: any[]): void;

    static generateMnemonic(...args: any[]): void;

    static getAddressFromBIP32Node(...args: any[]): void;

    static getAddressFromBitcoinKeychain(...args: any[]): void;

    static getAppPrivateKey(...args: any[]): void;

    static getAppsNode(...args: any[]): void;

    static getLegacyAppPrivateKey(...args: any[]): void;

    static getNodeFromBitcoinKeychain(...args: any[]): void;

}

export class Person {
    constructor(...args: any[]);

    address(...args: any[]): void;

    avatarUrl(...args: any[]): void;

    birthDate(...args: any[]): void;

    connections(...args: any[]): void;

    description(...args: any[]): void;

    familyName(...args: any[]): void;

    givenName(...args: any[]): void;

    name(...args: any[]): void;

    organizations(...args: any[]): void;

    profile(...args: any[]): void;

    toJSON(...args: any[]): void;

    verifiedAccounts(...args: any[]): void;

    static fromLegacyFormat(...args: any[]): void;

    static fromToken(...args: any[]): void;

    static makeZoneFile(...args: any[]): void;

    static validateProofs(...args: any[]): void;

    static validateSchema(...args: any[]): void;

}

export class Profile {
    constructor(...args: any[]);

    toJSON(...args: any[]): void;

    toToken(...args: any[]): void;

    static fromToken(...args: any[]): void;

    static makeZoneFile(...args: any[]): void;

    static validateProofs(...args: any[]): void;

    static validateSchema(...args: any[]): void;

}

export class PubkeyHashSigner {
    constructor(...args: any[]);

    getAddress(...args: any[]): void;

    signTransaction(...args: any[]): void;

    signerVersion(...args: any[]): void;

    static fromHexString(...args: any[]): void;

}

export class UserSession {
    constructor(...args: any[]);

    decryptContent(...args: any[]): void;

    deleteFile(...args: any[]): void;

    encryptContent(...args: any[]): void;

    generateAndStoreTransitKey(...args: any[]): void;

    getAuthResponseToken(...args: any[]): void;

    getFile(...args: any[]): void;

    getFileUrl(...args: any[]): void;

    handlePendingSignIn(...args: any[]): void;

    isSignInPending(...args: any[]): void;

    isUserSignedIn(...args: any[]): void;

    listFiles(...args: any[]): void;

    loadUserData(...args: any[]): void;

    makeAuthRequest(...args: any[]): void;

    putFile(...args: any[]): void;

    redirectToSignIn(...args: any[]): void;

    redirectToSignInWithAuthRequest(...args: any[]): void;

    signUserOut(...args: any[]): void;

}

export const BLOCKSTACK_GAIA_HUB_LABEL: string;

export const IdentityKeyPair: any;

export const TransactionSigner: any;

export const config: {
    logLevel: string;
    network: {
        DUST_MINIMUM: number;
        MAGIC_BYTES: string;
        blockstackAPIUrl: string;
        broadcastNameRegistration: any;
        broadcastServiceFetchHelper: any;
        broadcastServiceUrl: string;
        broadcastTransaction: any;
        broadcastZoneFile: any;
        btc: {
            broadcastTransaction: any;
            getBlockHeight: any;
            getNetworkedUTXOs: any;
            getTransactionInfo: any;
            utxoProviderUrl: string;
        };
        coerceAddress: any;
        countDustOutputs: any;
        excludeUtxoSet: any[];
        getAccountAt: any;
        getAccountBalance: any;
        getAccountHistoryPage: any;
        getAccountStatus: any;
        getAccountTokens: any;
        getBlockHeight: any;
        getConsensusHash: any;
        getDefaultBurnAddress: any;
        getFeeRate: any;
        getGracePeriod: any;
        getNameInfo: any;
        getNamePrice: any;
        getNamePriceV1: any;
        getNamePriceV2: any;
        getNamesOwned: any;
        getNamespaceBurnAddress: any;
        getNamespaceInfo: any;
        getNamespacePrice: any;
        getNamespacePriceV1: any;
        getNamespacePriceV2: any;
        getNetworkedUTXOs: any;
        getTransactionInfo: any;
        getUTXOs: any;
        getZonefile: any;
        includeUtxoMap: {
        };
        layer1: {
            bech32: string;
            bip32: {
                private: number;
                public: number;
            };
            messagePrefix: string;
            pubKeyHash: number;
            scriptHash: number;
            wif: number;
        };
        modifyUTXOSetFrom: any;
        resetUTXOs: any;
    };
};

export function CreativeWork(...args: any[]): any;

export function Organization(...args: any[]): any;

export function addUTXOsToFund(txBuilderIn: any, utxos: any, amountToFund: any, feeRate: any, fundNewFees: any): any;

export function connectToGaiaHub(gaiaHubUrl: any, challengeSignerHex: any, associationToken: any): any;

export function containsValidAddressProofStatement(proofStatement: any, address: any): any;

export function containsValidProofStatement(searchText: any, name: any): any;

export function decodeToken(token: any): any;

export function decryptContent(content: any, options: any): any;

export function decryptContentImpl(caller: any, content: any, options: any): any;

export function decryptMnemonic(data: any, password: any): any;

export function deleteFile(path: any): void;

export function doPublicKeysMatchIssuer(token: any): any;

export function doPublicKeysMatchUsername(token: any, nameLookupURL: any): any;

export function doSignaturesMatchPublicKeys(token: any): any;

export function ecPairToAddress(keyPair: any): any;

export function ecPairToHexString(secretKey: any): any;

export function encryptContent(content: any, options: any): any;

export function encryptContentImpl(caller: any, content: any, options: any): any;

export function encryptMnemonic(phrase: any, password: any): any;

export function estimateTXBytes(txIn: any, additionalInputs: any, additionalOutputs: any): any;

export function extractProfile(token: any, publicKeyOrAddress: any): any;

export function fetchAppManifest(authRequest: any): any;

export function getAddressFromDID(decentralizedID: any): any;

export function getAppBucketUrl(gaiaHubUrl: any, appPrivateKey: any): any;

export function getAuthRequestFromURL(): any;

export function getCoreSession(coreHost: any, corePort: any, apiPassword: any, appPrivateKey: any, blockchainId: any, authRequest: any, deviceId: any): any;

export function getDIDType(decentralizedID: any): any;

export function getEntropy(numberOfBytes: any): any;

export function getFile(path: any, options: any): any;

export function getFileImpl(caller: any, path: any, options: any): any;

export function getFileUrl(path: any, options: any): any;

export function getFileUrlImpl(caller: any, path: any, options: any): any;

export function getPublicKeyFromPrivate(privateKey: any): any;

export function getTokenFileUrl(zoneFileJson: any): any;

export function getUserAppFileUrl(path: any, username: any, appOrigin: any, zoneFileLookupURL: any): any;

export function handlePendingSignIn(nameLookupURL: any, authResponseToken: any, transitKey: any): any;

export function hexStringToECPair(skHex: any): any;

export function isExpirationDateValid(token: any): any;

export function isIssuanceDateValid(token: any): any;

export function isLaterVersion(v1: any, v2: any): any;

export function isManifestUriValid(token: any): any;

export function isRedirectUriValid(token: any): any;

export function isSameOriginAbsoluteUrl(uri1: any, uri2: any): any;

export function isSignInPending(): any;

export function isUserSignedIn(): any;

export function listFiles(callback: any): any;

export function listFilesImpl(caller: any, callback: any): any;

export function loadUserData(): any;

export function lookupProfile(username: any, zoneFileLookupURL: any): any;

export function makeAuthRequest(transitPrivateKey: any, redirectURI: any, manifestURI: any, scopes: any, appDomain: any, expiresAt: any, extraParams: any): any;

export function makeAuthResponse(privateKey: any, profile: any, username: any, metadata: any, coreToken: any, appPrivateKey: any, expiresAt: any, transitPublicKey: any, hubUrl: any, blockstackAPIUrl: any, associationToken: any): any;

export function makeCoreSessionRequest(appDomain: any, appMethods: any, appPrivateKey: any, blockchainID: any, thisDevice: any): any;

export function makeDIDFromAddress(address: any): any;

export function makeDIDFromPublicKey(publicKey: any): any;

export function makeECPrivateKey(): any;

export function makeProfileZoneFile(origin: any, tokenFileUrl: any): any;

export function makeUUID4(): any;

export function nextHour(): any;

export function nextMonth(): any;

export function nextYear(): any;

export function publicKeyToAddress(publicKey: any): any;

export function putFile(path: any, content: any, options: any): any;

export function putFileImpl(caller: any, path: any, content: any, options: any): any;

export function redirectToSignIn(redirectURI: any, manifestURI: any, scopes: any): void;

export function redirectToSignInWithAuthRequest(authRequest: any, blockstackIDHost: any): void;

export function redirectUserToApp(authRequest: any, authResponse: any): void;

export function resolveZoneFileToPerson(zoneFile: any, publicKeyOrAddress: any, callback: any): void;

export function resolveZoneFileToProfile(zoneFile: any, publicKeyOrAddress: any): any;

export function sendCoreSessionRequest(coreHost: any, corePort: any, coreAuthRequest: any, apiPassword: any): any;

export function signProfileToken(profile: any, privateKey: any, subject: any, issuer: any, signingAlgorithm: any, issuedAt: any, expiresAt: any): any;

export function signUserOut(redirectURL: any): void;

export function updateQueryStringParameter(uri: any, key: any, value: any): any;

export function uploadToGaiaHub(filename: any, contents: any, hubConfig: any, contentType: any): any;

export function validateProofs(profile: any, ownerAddress: any, name: any): any;

export function verifyAuthRequest(token: any): any;

export function verifyAuthRequestAndLoadManifest(token: any): any;

export function verifyAuthResponse(token: any, nameLookupURL: any): any;

export function verifyProfileToken(token: any, publicKeyOrAddress: any): any;

export function wrapProfileToken(token: any): any;

export namespace AppConfig {
    namespace prototype {
        function manifestURI(...args: any[]): void;

        function redirectURI(...args: any[]): void;

    }

}

export namespace BlockstackWallet {
    namespace prototype {
        function getBitcoinAddress(...args: any[]): void;

        function getBitcoinNode(...args: any[]): void;

        function getBitcoinPrivateKey(...args: any[]): void;

        function getBitcoinPrivateKeychain(...args: any[]): void;

        function getBitcoinPublicKeychain(...args: any[]): void;

        function getIdentityAddressNode(...args: any[]): void;

        function getIdentityKeyPair(...args: any[]): void;

        function getIdentityPrivateKeychain(...args: any[]): void;

        function getIdentityPublicKeychain(...args: any[]): void;

        function getIdentitySalt(...args: any[]): void;

        function toBase58(...args: any[]): void;

    }

}

export namespace CreativeWork {
    function fromToken(...args: any[]): void;

    function makeZoneFile(...args: any[]): void;

    function validateProofs(...args: any[]): void;

    function validateSchema(...args: any[]): void;

    namespace prototype {
        function toJSON(...args: any[]): void;

        function toToken(...args: any[]): void;

    }

}

export namespace Organization {
    function fromToken(...args: any[]): void;

    function makeZoneFile(...args: any[]): void;

    function validateProofs(...args: any[]): void;

    function validateSchema(...args: any[]): void;

    namespace prototype {
        function toJSON(...args: any[]): void;

        function toToken(...args: any[]): void;

    }

}

export namespace Person {
    namespace prototype {
        function address(...args: any[]): void;

        function avatarUrl(...args: any[]): void;

        function birthDate(...args: any[]): void;

        function connections(...args: any[]): void;

        function description(...args: any[]): void;

        function familyName(...args: any[]): void;

        function givenName(...args: any[]): void;

        function name(...args: any[]): void;

        function organizations(...args: any[]): void;

        function profile(...args: any[]): void;

        function toJSON(...args: any[]): void;

        function toToken(...args: any[]): void;

        function verifiedAccounts(...args: any[]): void;

    }

}

export namespace Profile {
    namespace prototype {
        function toJSON(...args: any[]): void;

        function toToken(...args: any[]): void;

    }

}

export namespace PubkeyHashSigner {
    namespace prototype {
        function getAddress(...args: any[]): void;

        function signTransaction(...args: any[]): void;

        function signerVersion(...args: any[]): void;

    }

}

export namespace UserSession {
    namespace prototype {
        function decryptContent(...args: any[]): void;

        function deleteFile(...args: any[]): void;

        function encryptContent(...args: any[]): void;

        function generateAndStoreTransitKey(...args: any[]): void;

        function getAuthResponseToken(...args: any[]): void;

        function getFile(...args: any[]): void;

        function getFileUrl(...args: any[]): void;

        function handlePendingSignIn(...args: any[]): void;

        function isSignInPending(...args: any[]): void;

        function isUserSignedIn(...args: any[]): void;

        function listFiles(...args: any[]): void;

        function loadUserData(...args: any[]): void;

        function makeAuthRequest(...args: any[]): void;

        function putFile(...args: any[]): void;

        function redirectToSignIn(...args: any[]): void;

        function redirectToSignInWithAuthRequest(...args: any[]): void;

        function signUserOut(...args: any[]): void;

    }

}

export namespace addUTXOsToFund {
    const prototype: {
    };

}

export namespace connectToGaiaHub {
    const prototype: {
    };

}

export namespace containsValidAddressProofStatement {
    const prototype: {
    };

}

export namespace containsValidProofStatement {
    const prototype: {
    };

}

export namespace decodeToken {
    const prototype: {
    };

}

export namespace decryptContent {
    const prototype: {
    };

}

export namespace decryptContentImpl {
    const prototype: {
    };

}

export namespace decryptMnemonic {
    const prototype: {
    };

}

export namespace deleteFile {
    const prototype: {
    };

}

export namespace doPublicKeysMatchIssuer {
    const prototype: {
    };

}

export namespace doPublicKeysMatchUsername {
    const prototype: {
    };

}

export namespace doSignaturesMatchPublicKeys {
    const prototype: {
    };

}

export namespace ecPairToAddress {
    const prototype: {
    };

}

export namespace ecPairToHexString {
    const prototype: {
    };

}

export namespace encryptContent {
    const prototype: {
    };

}

export namespace encryptContentImpl {
    const prototype: {
    };

}

export namespace encryptMnemonic {
    const prototype: {
    };

}

export namespace estimateTXBytes {
    const prototype: {
    };

}

export namespace extractProfile {
    const prototype: {
    };

}

export namespace fetchAppManifest {
    const prototype: {
    };

}

export namespace getAddressFromDID {
    const prototype: {
    };

}

export namespace getAppBucketUrl {
    const prototype: {
    };

}

export namespace getAuthRequestFromURL {
    const prototype: {
    };

}

export namespace getCoreSession {
    const prototype: {
    };

}

export namespace getDIDType {
    const prototype: {
    };

}

export namespace getEntropy {
    const prototype: {
    };

}

export namespace getFile {
    const prototype: {
    };

}

export namespace getFileImpl {
    const prototype: {
    };

}

export namespace getFileUrl {
    const prototype: {
    };

}

export namespace getFileUrlImpl {
    const prototype: {
    };

}

export namespace getPublicKeyFromPrivate {
    const prototype: {
    };

}

export namespace getTokenFileUrl {
    const prototype: {
    };

}

export namespace getUserAppFileUrl {
    const prototype: {
    };

}

export namespace handlePendingSignIn {
    const prototype: {
    };

}

export namespace hexStringToECPair {
    const prototype: {
    };

}

export namespace isExpirationDateValid {
    const prototype: {
    };

}

export namespace isIssuanceDateValid {
    const prototype: {
    };

}

export namespace isLaterVersion {
    const prototype: {
    };

}

export namespace isManifestUriValid {
    const prototype: {
    };

}

export namespace isRedirectUriValid {
    const prototype: {
    };

}

export namespace isSameOriginAbsoluteUrl {
    const prototype: {
    };

}

export namespace isSignInPending {
    const prototype: {
    };

}

export namespace isUserSignedIn {
    const prototype: {
    };

}

export namespace listFiles {
    const prototype: {
    };

}

export namespace listFilesImpl {
    const prototype: {
    };

}

export namespace loadUserData {
    const prototype: {
    };

}

export namespace lookupProfile {
    const prototype: {
    };

}

export namespace makeAuthRequest {
    const prototype: {
    };

}

export namespace makeAuthResponse {
    const prototype: {
    };

}

export namespace makeCoreSessionRequest {
    const prototype: {
    };

}

export namespace makeDIDFromAddress {
    const prototype: {
    };

}

export namespace makeDIDFromPublicKey {
    const prototype: {
    };

}

export namespace makeECPrivateKey {
    const prototype: {
    };

}

export namespace makeProfileZoneFile {
    const prototype: {
    };

}

export namespace makeUUID4 {
    const prototype: {
    };

}

export namespace network {
    class BitcoindAPI {
        constructor(...args: any[]);

        broadcastTransaction(...args: any[]): void;

        getBlockHeight(...args: any[]): void;

        getNetworkedUTXOs(...args: any[]): void;

        getTransactionInfo(...args: any[]): void;

    }

    class BlockchainInfoApi {
        constructor(...args: any[]);

        broadcastTransaction(...args: any[]): void;

        getBlockHeight(...args: any[]): void;

        getNetworkedUTXOs(...args: any[]): void;

        getTransactionInfo(...args: any[]): void;

    }

    class BlockstackNetwork {
        constructor(...args: any[]);

        broadcastNameRegistration(...args: any[]): void;

        broadcastServiceFetchHelper(...args: any[]): void;

        broadcastTransaction(...args: any[]): void;

        broadcastZoneFile(...args: any[]): void;

        coerceAddress(...args: any[]): void;

        countDustOutputs(...args: any[]): void;

        getAccountAt(...args: any[]): void;

        getAccountBalance(...args: any[]): void;

        getAccountHistoryPage(...args: any[]): void;

        getAccountStatus(...args: any[]): void;

        getAccountTokens(...args: any[]): void;

        getBlockHeight(...args: any[]): void;

        getConsensusHash(...args: any[]): void;

        getDefaultBurnAddress(...args: any[]): void;

        getFeeRate(...args: any[]): void;

        getGracePeriod(...args: any[]): void;

        getNameInfo(...args: any[]): void;

        getNamePrice(...args: any[]): void;

        getNamePriceV1(...args: any[]): void;

        getNamePriceV2(...args: any[]): void;

        getNamesOwned(...args: any[]): void;

        getNamespaceBurnAddress(...args: any[]): void;

        getNamespaceInfo(...args: any[]): void;

        getNamespacePrice(...args: any[]): void;

        getNamespacePriceV1(...args: any[]): void;

        getNamespacePriceV2(...args: any[]): void;

        getNetworkedUTXOs(...args: any[]): void;

        getTransactionInfo(...args: any[]): void;

        getUTXOs(...args: any[]): void;

        getZonefile(...args: any[]): void;

        modifyUTXOSetFrom(...args: any[]): void;

        resetUTXOs(...args: any[]): void;

    }

    class InsightClient {
        constructor(...args: any[]);

        broadcastTransaction(...args: any[]): void;

        getBlockHeight(...args: any[]): void;

        getNetworkedUTXOs(...args: any[]): void;

        getTransactionInfo(...args: any[]): void;

    }

    class LocalRegtest {
        constructor(...args: any[]);

        getFeeRate(...args: any[]): void;

    }

    const defaults: {
        LOCAL_REGTEST: {
            DUST_MINIMUM: number;
            MAGIC_BYTES: string;
            blockstackAPIUrl: string;
            broadcastNameRegistration: any;
            broadcastServiceFetchHelper: any;
            broadcastServiceUrl: string;
            broadcastTransaction: any;
            broadcastZoneFile: any;
            btc: {
                bitcoindCredentials: {
                    password: string;
                    username: string;
                };
                bitcoindUrl: string;
                broadcastTransaction: any;
                getBlockHeight: any;
                getNetworkedUTXOs: any;
                getTransactionInfo: any;
                importedBefore: {
                };
            };
            coerceAddress: any;
            countDustOutputs: any;
            excludeUtxoSet: any[];
            getAccountAt: any;
            getAccountBalance: any;
            getAccountHistoryPage: any;
            getAccountStatus: any;
            getAccountTokens: any;
            getBlockHeight: any;
            getConsensusHash: any;
            getDefaultBurnAddress: any;
            getFeeRate: any;
            getGracePeriod: any;
            getNameInfo: any;
            getNamePrice: any;
            getNamePriceV1: any;
            getNamePriceV2: any;
            getNamesOwned: any;
            getNamespaceBurnAddress: any;
            getNamespaceInfo: any;
            getNamespacePrice: any;
            getNamespacePriceV1: any;
            getNamespacePriceV2: any;
            getNetworkedUTXOs: any;
            getTransactionInfo: any;
            getUTXOs: any;
            getZonefile: any;
            includeUtxoMap: {
            };
            layer1: {
                bech32: string;
                bip32: {
                    private: number;
                    public: number;
                };
                messagePrefix: string;
                pubKeyHash: number;
                scriptHash: number;
                wif: number;
            };
            modifyUTXOSetFrom: any;
            resetUTXOs: any;
        };
        MAINNET_DEFAULT: {
            DUST_MINIMUM: number;
            MAGIC_BYTES: string;
            blockstackAPIUrl: string;
            broadcastNameRegistration: any;
            broadcastServiceFetchHelper: any;
            broadcastServiceUrl: string;
            broadcastTransaction: any;
            broadcastZoneFile: any;
            btc: {
                broadcastTransaction: any;
                getBlockHeight: any;
                getNetworkedUTXOs: any;
                getTransactionInfo: any;
                utxoProviderUrl: string;
            };
            coerceAddress: any;
            countDustOutputs: any;
            excludeUtxoSet: any[];
            getAccountAt: any;
            getAccountBalance: any;
            getAccountHistoryPage: any;
            getAccountStatus: any;
            getAccountTokens: any;
            getBlockHeight: any;
            getConsensusHash: any;
            getDefaultBurnAddress: any;
            getFeeRate: any;
            getGracePeriod: any;
            getNameInfo: any;
            getNamePrice: any;
            getNamePriceV1: any;
            getNamePriceV2: any;
            getNamesOwned: any;
            getNamespaceBurnAddress: any;
            getNamespaceInfo: any;
            getNamespacePrice: any;
            getNamespacePriceV1: any;
            getNamespacePriceV2: any;
            getNetworkedUTXOs: any;
            getTransactionInfo: any;
            getUTXOs: any;
            getZonefile: any;
            includeUtxoMap: {
            };
            layer1: {
                bech32: string;
                bip32: {
                    private: number;
                    public: number;
                };
                messagePrefix: string;
                pubKeyHash: number;
                scriptHash: number;
                wif: number;
            };
            modifyUTXOSetFrom: any;
            resetUTXOs: any;
        };
    };

    namespace BitcoindAPI {
        namespace prototype {
            function broadcastTransaction(...args: any[]): void;

            function getBlockHeight(...args: any[]): void;

            function getNetworkedUTXOs(...args: any[]): void;

            function getTransactionInfo(...args: any[]): void;

        }

    }

    namespace BlockchainInfoApi {
        namespace prototype {
            function broadcastTransaction(...args: any[]): void;

            function getBlockHeight(...args: any[]): void;

            function getNetworkedUTXOs(...args: any[]): void;

            function getTransactionInfo(...args: any[]): void;

        }

    }

    namespace BlockstackNetwork {
        namespace prototype {
            function broadcastNameRegistration(...args: any[]): void;

            function broadcastServiceFetchHelper(...args: any[]): void;

            function broadcastTransaction(...args: any[]): void;

            function broadcastZoneFile(...args: any[]): void;

            function coerceAddress(...args: any[]): void;

            function countDustOutputs(...args: any[]): void;

            function getAccountAt(...args: any[]): void;

            function getAccountBalance(...args: any[]): void;

            function getAccountHistoryPage(...args: any[]): void;

            function getAccountStatus(...args: any[]): void;

            function getAccountTokens(...args: any[]): void;

            function getBlockHeight(...args: any[]): void;

            function getConsensusHash(...args: any[]): void;

            function getDefaultBurnAddress(...args: any[]): void;

            function getFeeRate(...args: any[]): void;

            function getGracePeriod(...args: any[]): void;

            function getNameInfo(...args: any[]): void;

            function getNamePrice(...args: any[]): void;

            function getNamePriceV1(...args: any[]): void;

            function getNamePriceV2(...args: any[]): void;

            function getNamesOwned(...args: any[]): void;

            function getNamespaceBurnAddress(...args: any[]): void;

            function getNamespaceInfo(...args: any[]): void;

            function getNamespacePrice(...args: any[]): void;

            function getNamespacePriceV1(...args: any[]): void;

            function getNamespacePriceV2(...args: any[]): void;

            function getNetworkedUTXOs(...args: any[]): void;

            function getTransactionInfo(...args: any[]): void;

            function getUTXOs(...args: any[]): void;

            function getZonefile(...args: any[]): void;

            function modifyUTXOSetFrom(...args: any[]): void;

            function resetUTXOs(...args: any[]): void;

        }

    }

    namespace InsightClient {
        namespace prototype {
            function broadcastTransaction(...args: any[]): void;

            function getBlockHeight(...args: any[]): void;

            function getNetworkedUTXOs(...args: any[]): void;

            function getTransactionInfo(...args: any[]): void;

        }

    }

    namespace LocalRegtest {
        namespace prototype {
            function broadcastNameRegistration(...args: any[]): void;

            function broadcastServiceFetchHelper(...args: any[]): void;

            function broadcastTransaction(...args: any[]): void;

            function broadcastZoneFile(...args: any[]): void;

            function coerceAddress(...args: any[]): void;

            function countDustOutputs(...args: any[]): void;

            function getAccountAt(...args: any[]): void;

            function getAccountBalance(...args: any[]): void;

            function getAccountHistoryPage(...args: any[]): void;

            function getAccountStatus(...args: any[]): void;

            function getAccountTokens(...args: any[]): void;

            function getBlockHeight(...args: any[]): void;

            function getConsensusHash(...args: any[]): void;

            function getDefaultBurnAddress(...args: any[]): void;

            function getFeeRate(...args: any[]): void;

            function getGracePeriod(...args: any[]): void;

            function getNameInfo(...args: any[]): void;

            function getNamePrice(...args: any[]): void;

            function getNamePriceV1(...args: any[]): void;

            function getNamePriceV2(...args: any[]): void;

            function getNamesOwned(...args: any[]): void;

            function getNamespaceBurnAddress(...args: any[]): void;

            function getNamespaceInfo(...args: any[]): void;

            function getNamespacePrice(...args: any[]): void;

            function getNamespacePriceV1(...args: any[]): void;

            function getNamespacePriceV2(...args: any[]): void;

            function getNetworkedUTXOs(...args: any[]): void;

            function getTransactionInfo(...args: any[]): void;

            function getUTXOs(...args: any[]): void;

            function getZonefile(...args: any[]): void;

            function modifyUTXOSetFrom(...args: any[]): void;

            function resetUTXOs(...args: any[]): void;

        }

    }

}

export namespace nextHour {
    const prototype: {
    };

}

export namespace nextMonth {
    const prototype: {
    };

}

export namespace nextYear {
    const prototype: {
    };

}

export namespace profileServices {
    function facebook(...args: any[]): any;

    function github(...args: any[]): any;

    function hackerNews(...args: any[]): any;

    function instagram(...args: any[]): any;

    function linkedIn(...args: any[]): any;

    function twitter(...args: any[]): any;

    namespace facebook {
        const prototype: {
        };

        function getBaseUrls(...args: any[]): void;

        function getProofIdentity(...args: any[]): void;

        function getProofStatement(...args: any[]): void;

        function getProofUrl(...args: any[]): void;

        function normalizeFacebookUrl(...args: any[]): void;

        function prefixScheme(...args: any[]): void;

        function shouldValidateIdentityInBody(...args: any[]): void;

        function validateProof(...args: any[]): void;

    }

    namespace github {
        const prototype: {
        };

        function getBaseUrls(...args: any[]): void;

        function getProofIdentity(...args: any[]): void;

        function getProofStatement(...args: any[]): void;

        function getProofUrl(...args: any[]): void;

        function prefixScheme(...args: any[]): void;

        function shouldValidateIdentityInBody(...args: any[]): void;

        function validateProof(...args: any[]): void;

    }

    namespace hackerNews {
        const prototype: {
        };

        function getBaseUrls(...args: any[]): void;

        function getProofIdentity(...args: any[]): void;

        function getProofStatement(...args: any[]): void;

        function getProofUrl(...args: any[]): void;

        function prefixScheme(...args: any[]): void;

        function shouldValidateIdentityInBody(...args: any[]): void;

        function validateProof(...args: any[]): void;

    }

    namespace instagram {
        const prototype: {
        };

        function getBaseUrls(...args: any[]): void;

        function getProofIdentity(...args: any[]): void;

        function getProofStatement(...args: any[]): void;

        function getProofUrl(...args: any[]): void;

        function normalizeInstagramUrl(...args: any[]): void;

        function prefixScheme(...args: any[]): void;

        function shouldValidateIdentityInBody(...args: any[]): void;

        function validateProof(...args: any[]): void;

    }

    namespace linkedIn {
        const prototype: {
        };

        function getBaseUrls(...args: any[]): void;

        function getProofIdentity(...args: any[]): void;

        function getProofStatement(...args: any[]): void;

        function getProofUrl(...args: any[]): void;

        function prefixScheme(...args: any[]): void;

        function shouldValidateIdentityInBody(...args: any[]): void;

        function validateProof(...args: any[]): void;

    }

    namespace twitter {
        const prototype: {
        };

        function getBaseUrls(...args: any[]): void;

        function getProofIdentity(...args: any[]): void;

        function getProofStatement(...args: any[]): void;

        function getProofUrl(...args: any[]): void;

        function prefixScheme(...args: any[]): void;

        function shouldValidateIdentityInBody(...args: any[]): void;

        function validateProof(...args: any[]): void;

    }

}

export namespace publicKeyToAddress {
    const prototype: {
    };

}

export namespace putFile {
    const prototype: {
    };

}

export namespace putFileImpl {
    const prototype: {
    };

}

export namespace redirectToSignIn {
    const prototype: {
    };

}

export namespace redirectToSignInWithAuthRequest {
    const prototype: {
    };

}

export namespace redirectUserToApp {
    const prototype: {
    };

}

export namespace resolveZoneFileToPerson {
    const prototype: {
    };

}

export namespace resolveZoneFileToProfile {
    const prototype: {
    };

}

export namespace safety {
    function addressCanReceiveName(address: any): any;

    function isAccountSpendable(address: any, tokenType: any, blockHeight: any): any;

    function isInGracePeriod(fullyQualifiedName: any): any;

    function isNameAvailable(fullyQualifiedName: any): any;

    function isNameValid(fullyQualifiedName: any): any;

    function isNamespaceAvailable(namespaceID: any): any;

    function isNamespaceValid(namespaceID: any): any;

    function namespaceIsReady(namespaceID: any): any;

    function namespaceIsRevealed(namespaceID: any): any;

    function ownsName(fullyQualifiedName: any, ownerAddress: any): any;

    function revealedNamespace(namespaceID: any, revealAddress: any): any;

    namespace addressCanReceiveName {
        const prototype: {
        };

    }

    namespace isAccountSpendable {
        const prototype: {
        };

    }

    namespace isInGracePeriod {
        const prototype: {
        };

    }

    namespace isNameAvailable {
        const prototype: {
        };

    }

    namespace isNameValid {
        const prototype: {
        };

    }

    namespace isNamespaceAvailable {
        const prototype: {
        };

    }

    namespace isNamespaceValid {
        const prototype: {
        };

    }

    namespace namespaceIsReady {
        const prototype: {
        };

    }

    namespace namespaceIsRevealed {
        const prototype: {
        };

    }

    namespace ownsName {
        const prototype: {
        };

    }

    namespace revealedNamespace {
        const prototype: {
        };

    }

}

export namespace sendCoreSessionRequest {
    const prototype: {
    };

}

export namespace signProfileToken {
    const prototype: {
    };

}

export namespace signUserOut {
    const prototype: {
    };

}

export namespace transactions {
    class BlockstackNamespace {
        constructor(...args: any[]);

        check(...args: any[]): void;

        setBase(...args: any[]): void;

        setBuckets(...args: any[]): void;

        setCoeff(...args: any[]): void;

        setLifetime(...args: any[]): void;

        setNoVowelDiscount(...args: any[]): void;

        setNonalphaDiscount(...args: any[]): void;

        setVersion(...args: any[]): void;

        toHexPayload(...args: any[]): void;

    }

    function estimateAnnounce(messageHash: any, senderUtxos: any): any;

    function estimateNameImport(name: any, recipientAddr: any, zonefileHash: any, importUtxos: any): any;

    function estimateNamespacePreorder(namespaceID: any, revealAddress: any, paymentAddress: any, paymentUtxos: any): any;

    function estimateNamespaceReady(namespaceID: any, revealUtxos: any): any;

    function estimateNamespaceReveal(namespace: any, revealAddress: any, paymentAddress: any, paymentUtxos: any): any;

    function estimatePreorder(fullyQualifiedName: any, destinationAddress: any, paymentAddress: any, paymentUtxos: any): any;

    function estimateRegister(fullyQualifiedName: any, registerAddress: any, paymentAddress: any, includingZonefile: any, paymentUtxos: any): any;

    function estimateRenewal(fullyQualifiedName: any, destinationAddress: any, ownerAddress: any, paymentAddress: any, includingZonefile: any, paymentUtxos: any): any;

    function estimateRevoke(fullyQualifiedName: any, ownerAddress: any, paymentAddress: any, paymentUtxos: any): any;

    function estimateTokenTransfer(recipientAddress: any, tokenType: any, tokenAmount: any, scratchArea: any, senderUtxos: any, additionalOutputs: any): any;

    function estimateTransfer(fullyQualifiedName: any, destinationAddress: any, ownerAddress: any, paymentAddress: any, paymentUtxos: any): any;

    function estimateUpdate(fullyQualifiedName: any, ownerAddress: any, paymentAddress: any, paymentUtxos: any): any;

    function makeAnnounce(messageHash: any, senderKeyIn: any, buildIncomplete: any): any;

    function makeBitcoinSpend(destinationAddress: any, paymentKeyIn: any, amount: any, buildIncomplete: any): any;

    function makeNameImport(name: any, recipientAddr: any, zonefileHash: any, importerKeyIn: any, buildIncomplete: any): any;

    function makeNamespacePreorder(namespaceID: any, revealAddress: any, paymentKeyIn: any, buildIncomplete: any): any;

    function makeNamespaceReady(namespaceID: any, revealKeyIn: any, buildIncomplete: any): any;

    function makeNamespaceReveal(namespace: any, revealAddress: any, paymentKeyIn: any, buildIncomplete: any): any;

    function makePreorder(fullyQualifiedName: any, destinationAddress: any, paymentKeyIn: any, buildIncomplete: any): any;

    function makeRegister(fullyQualifiedName: any, registerAddress: any, paymentKeyIn: any, zonefile: any, valueHash: any, buildIncomplete: any): any;

    function makeRenewal(fullyQualifiedName: any, destinationAddress: any, ownerKeyIn: any, paymentKeyIn: any, zonefile: any, valueHash: any, buildIncomplete: any): any;

    function makeRevoke(fullyQualifiedName: any, ownerKeyIn: any, paymentKeyIn: any, buildIncomplete: any): any;

    function makeTokenTransfer(recipientAddress: any, tokenType: any, tokenAmount: any, scratchArea: any, senderKeyIn: any, btcFunderKeyIn: any, buildIncomplete: any): any;

    function makeTransfer(fullyQualifiedName: any, destinationAddress: any, ownerKeyIn: any, paymentKeyIn: any, keepZonefile: any, buildIncomplete: any): any;

    function makeUpdate(fullyQualifiedName: any, ownerKeyIn: any, paymentKeyIn: any, zonefile: any, valueHash: any, buildIncomplete: any): any;

    namespace BlockstackNamespace {
        namespace prototype {
            function check(...args: any[]): void;

            function setBase(...args: any[]): void;

            function setBuckets(...args: any[]): void;

            function setCoeff(...args: any[]): void;

            function setLifetime(...args: any[]): void;

            function setNoVowelDiscount(...args: any[]): void;

            function setNonalphaDiscount(...args: any[]): void;

            function setVersion(...args: any[]): void;

            function toHexPayload(...args: any[]): void;

        }

    }

    namespace estimateAnnounce {
        const prototype: {
        };

    }

    namespace estimateNameImport {
        const prototype: {
        };

    }

    namespace estimateNamespacePreorder {
        const prototype: {
        };

    }

    namespace estimateNamespaceReady {
        const prototype: {
        };

    }

    namespace estimateNamespaceReveal {
        const prototype: {
        };

    }

    namespace estimatePreorder {
        const prototype: {
        };

    }

    namespace estimateRegister {
        const prototype: {
        };

    }

    namespace estimateRenewal {
        const prototype: {
        };

    }

    namespace estimateRevoke {
        const prototype: {
        };

    }

    namespace estimateTokenTransfer {
        const prototype: {
        };

    }

    namespace estimateTransfer {
        const prototype: {
        };

    }

    namespace estimateUpdate {
        const prototype: {
        };

    }

    namespace makeAnnounce {
        const prototype: {
        };

    }

    namespace makeBitcoinSpend {
        const prototype: {
        };

    }

    namespace makeNameImport {
        const prototype: {
        };

    }

    namespace makeNamespacePreorder {
        const prototype: {
        };

    }

    namespace makeNamespaceReady {
        const prototype: {
        };

    }

    namespace makeNamespaceReveal {
        const prototype: {
        };

    }

    namespace makePreorder {
        const prototype: {
        };

    }

    namespace makeRegister {
        const prototype: {
        };

    }

    namespace makeRenewal {
        const prototype: {
        };

    }

    namespace makeRevoke {
        const prototype: {
        };

    }

    namespace makeTokenTransfer {
        const prototype: {
        };

    }

    namespace makeTransfer {
        const prototype: {
        };

    }

    namespace makeUpdate {
        const prototype: {
        };

    }

}

export namespace updateQueryStringParameter {
    const prototype: {
    };

}

export namespace uploadToGaiaHub {
    const prototype: {
    };

}

export namespace validateProofs {
    const prototype: {
    };

}

export namespace verifyAuthRequest {
    const prototype: {
    };

}

export namespace verifyAuthRequestAndLoadManifest {
    const prototype: {
    };

}

export namespace verifyAuthResponse {
    const prototype: {
    };

}

export namespace verifyProfileToken {
    const prototype: {
    };

}

export namespace wrapProfileToken {
    const prototype: {
    };

}

